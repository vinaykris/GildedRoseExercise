package test.java.com.gildedrose;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

import main.java.com.gildedrose.*;

public class GildedRoseTest {
    

	@Test
    public void should_decrease_sellin_by_one_for_general_items() {
        //arrange
		Item[] items = new Item[] { new Item("foo", 5, 4) };
        GildedRose app = new GildedRose(items);
        //act
        app.updateQuality();
        //assert
        assertEquals(4, app.items[0].sellIn);
    }
	
	@Test
    public void should_decrease_quality_by_one_for_general_items() {
        Item[] items = new Item[] { new Item("foo", 5, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(3, app.items[0].quality);
    }
	
	@Test
    public void should_decrease_quality_twice_when_sellin_passed_for_general_items() {
        Item[] items = new Item[] { new Item("foo", 0, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(2, app.items[0].quality);
    }
	
	@Test
    public void should_not_decrease_quality_to_negative_for_general_items() {
        Item[] items = new Item[] { new Item("foo", 5, 0) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(0, app.items[0].quality);
    }
	
	@Test
    public void should_increase_quality_by_one_for_AgedBrie_items() {
        Item[] items = new Item[] { new Item("Aged Brie", 5, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(5, app.items[0].quality);
    }
	
	@Test
    public void should_not_increase_quality_after_50_for_AgedBrie_items() {
        Item[] items = new Item[] { new Item("Aged Brie", 5, 50) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(50, app.items[0].quality);
    }
	
	@Test
    public void should_increase_quality_by_two_when_sellin_is_passed_for_AgedBrie_items() {
        Item[] items = new Item[] { new Item("Aged Brie", 0, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(6, app.items[0].quality);
    }
	
	@Test
    public void should_not_change_quality_for_Sulfras_items() {
        Item[] items = new Item[] { new Item("Sulfuras, Hand of Ragnaros", 5, 42) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(42, app.items[0].quality);
    }
	
	@Test
    public void should_not_change_sellin_for_Sulfras_items() {
        Item[] items = new Item[] { new Item("Sulfuras, Hand of Ragnaros", 5, 42) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(5, app.items[0].sellIn);
    }
	
	@Test
    public void should_increase_quality_by_two_when_sellin_is_11_for_Backstage_items() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 11, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(5, app.items[0].quality);
    }
	
	@Test
    public void should_increase_quality_by_two_when_sellin_is_10_for_Backstage_items() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 10, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(6, app.items[0].quality);
    }
	
	@Test
    public void should_increase_quality_by_two_when_sellin_is_6_for_Backstage_items() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 6, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(6, app.items[0].quality);
    }
	
	@Test
    public void should_increase_quality_by_two_when_sellin_is_5_for_Backstage_items() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 5, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(7, app.items[0].quality);
    }
	
	@Test
    public void should_increase_quality_by_two_when_sellin_is_1_for_Backstage_items() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 1, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(7, app.items[0].quality);
    }
	
	@Test
    public void should_reduce_quality_to_zero_when_sellin_is_0_for_Backstage_items() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert",0, 4) };
        GildedRose app = new GildedRose(items);
        app.updateQuality();
        assertEquals(0, app.items[0].quality);
    }
}
