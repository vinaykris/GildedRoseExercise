package test.java.com.gildedrose;

import static org.junit.Assert.*;

import org.junit.Test;

import main.java.com.gildedrose.*;

public class GildedRoseTest {

	@Test
	public void should_decrease_sellin_by_one_for_general_items()
    {
        Item[] items = new Item[] { new Item ("foo", 2, 3) };
        GildedRose store = new GildedRose(items);
        store.updateQuality();
        assertEquals(1, store.items[0].sellIn);
    }
	
    @Test
    public void should_decrease_quality_by_one_for_general_before_sellin() {
        //arrange
    	Item[] items = new Item[] { new Item("foo",3, 3) };
        int expectedQuality = 2;
        GildedRose store = new GildedRose(items);
        //act
        store.updateQuality();
        //assert
        assertEquals(expectedQuality, store.items[0].quality);
    }
    
    @Test
    public void should_decrease_quality_by_two_for_general_after_sellin() {
        //arrange
    	Item[] items = new Item[] { new Item("foo",0, 3) };
        int expectedQuality = 1;
        GildedRose store = new GildedRose(items);
        //act
        store.updateQuality();
        //assert
        assertEquals(expectedQuality, store.items[0].quality);
    }
    
    @Test
    public void should_not_decrease_quality_when_quality_0_for_general() {
        //arrange
    	Item[] items = new Item[] { new Item("foo",2, 0) };
        int expectedQuality = 0;
        GildedRose store = new GildedRose(items);
        //act
        store.updateQuality();
        //assert
        assertEquals(expectedQuality, store.items[0].quality);
    }
    
    @Test
    public void should_increase_quality_by_one_for_aged_brie_before_sellin() {
        //arrange
    	Item[] items = new Item[] { new Item("Aged Brie",2, 3) };
        int expectedQuality = 4;
        GildedRose store = new GildedRose(items);
        //act
        store.updateQuality();
        //assert
        assertEquals(expectedQuality, store.items[0].quality);
    }
    
    @Test
    public void should_increase_quality_by_two_for_aged_brie_after_sellin() {
        Item[] items = new Item[] { new Item("Aged Brie", 0, 3) };
        GildedRose store = new GildedRose(items);
        store.updateQuality();
        assertEquals(5, store.items[0].quality);
    }
    
    @Test
    public void should_not_increase_quality_when_quality_50_for_agedbrie() {
        //arrange
    	Item[] items = new Item[] { new Item("Aged Brie",2, 50) };
        int expectedQuality = 50;
        GildedRose store = new GildedRose(items);
        //act
        store.updateQuality();
        //assert
        assertEquals(expectedQuality, store.items[0].quality);
    }
    
    @Test
    public void should_not_change_quality_for_sulfras() {
        //arrange
    	Item[] items = new Item[] { new Item("Sulfuras, Hand of Ragnaros",2, 5) };
        int expectedQuality = 5;
        GildedRose store = new GildedRose(items);
        //act
        store.updateQuality();
        //assert
        assertEquals(expectedQuality, store.items[0].quality);
    }
    
    @Test
    public void should_not_change_sellin_for_sulfras() {
        //arrange
    	Item[] items = new Item[] { new Item("Sulfuras, Hand of Ragnaros",2, 5) };
        int expectedSellin = 2;
        GildedRose store = new GildedRose(items);
        //act
        store.updateQuality();
        //assert
        assertEquals(expectedSellin, store.items[0].sellIn);
    }
    
    @Test
    public void should_increase_quality_by_one_for_backstage_passes_when_sellin_greater_than_10() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 11, 20) };
        GildedRose store = new GildedRose(items);
        store.updateQuality();
        assertEquals(21, store.items[0].quality);
    }

    @Test
    public void should_increase_quality_by_two_for_backstage_passes_when_sellin_less_than_or_equal_to_10_and_greater_than_5() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 10, 20) };
        GildedRose store = new GildedRose(items);
        store.updateQuality();
        assertEquals(22, store.items[0].quality);
    }

    @Test
    public void should_increase_quality_by_three_for_backstage_passes_when_sellin_less_than_or_equal_to_5_and_greater_than_0() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 5, 20) };
        GildedRose store = new GildedRose(items);
        store.updateQuality();
        assertEquals(23, store.items[0].quality);
    }

    @Test
    public void should_drop_quality_to_zero_for_backstage_passes_after_sellin() {
        Item[] items = new Item[] { new Item("Backstage passes to a TAFKAL80ETC concert", 0, 20) };
        GildedRose store = new GildedRose(items);
        store.updateQuality();
        assertEquals(0, store.items[0].quality);
    }


}
